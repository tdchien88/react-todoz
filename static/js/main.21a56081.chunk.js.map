{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","onClick","handleTodoComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","handleTodoRemove","TodoList","todos","map","rootElement","document","getElementById","render","setTodos","newTodosState","push","find","filter","length","classList","add","remove"],"mappings":"6LAuDeA,EA/CE,SAACC,GAEhB,IAAMC,EAAWC,SAA+B,MAFH,EAKXA,WAAe,IALJ,mBAKtCC,EALsC,KAK3BC,EAL2B,KAkC7C,OACE,uBAAKC,UAAU,aACb,yBACEC,IAAKL,EACLM,KAAK,OACLC,YAAY,iBACZC,SAAU,SAAAC,GAAK,OAhCrB,SAA2BA,GAEzBN,EAAaM,EAAMC,OAAOC,OA8BHC,CAAkBH,IACrCI,WAAY,SAAAJ,GAAK,OA3BvB,SAA0BA,GAExB,GAAkB,UAAdA,EAAMK,IAAiB,CAEzB,IAAMC,EAAyB,CAC7BC,GAAIC,IAAQC,WACZC,KAAMjB,EACNkB,aAAa,GAIfrB,EAAMsB,iBAAiBN,GAGnBf,GAAYA,EAASsB,UACvBtB,EAASsB,QAAQX,MAAQ,KAYJY,CAAiBd,QChB/Be,EA1BE,SAACzB,GAChB,OACE,uBAAKK,UAAU,aACb,uBAAKqB,QAAS,kBAAM1B,EAAM2B,mBAAmB3B,EAAM4B,KAAKX,MACrDjB,EAAM4B,KAAKP,YACV,wBAAMhB,UAAU,qBAAhB,UAEA,wBAAMA,UAAU,yBAIpB,uBAAKA,UAAU,2BACb,yBACEO,MAAOZ,EAAM4B,KAAKR,KAClBS,OAAQ7B,EAAM8B,eACdrB,SAAU,SAACC,GAAD,OAAgDV,EAAM+B,iBAAiBrB,EAAOV,EAAM4B,KAAKX,QAIvG,uBAAKZ,UAAU,cAAcqB,QAAS,kBAAM1B,EAAMgC,iBAAiBhC,EAAM4B,KAAKX,MAA9E,YCISgB,EApBE,SAACjC,GAChB,OACE,uBAAKK,UAAU,aACb,0BACGL,EAAMkC,MAAMC,KAAI,SAACP,GAAD,OACf,sBAAIb,IAAKa,EAAKX,IACZ,gBAAC,EAAD,CACEW,KAAMA,EACNG,iBAAkB/B,EAAM+B,iBACxBC,iBAAkBhC,EAAMgC,iBACxBL,mBAAoB3B,EAAM2B,mBAC1BG,eAAgB9B,EAAM8B,wBCqE9BM,G,MAAcC,SAASC,eAAe,SAC5CC,iBAAO,iBA5Ea,WAAO,IAAD,EACErC,WAAgC,IADlC,mBACjBgC,EADiB,KACVM,EADU,KAyDxB,OACE,uBAAKnC,UAAU,iBACb,gBAAC,EAAD,CACE6B,MAAOA,EACPZ,iBAzDN,SAA0BM,GAExB,IAAMa,EAA8B,YAAOP,GAG3CO,EAAcC,KAAKd,GAGnBY,EAASC,MAoDP,gBAAC,EAAD,CACEP,MAAOA,EACPH,iBAlDN,SAA0BrB,EAA4CO,GAEpE,IAAMwB,EAA8B,YAAOP,GAG3CO,EAAcE,MAAK,SAACf,GAAD,OAAyBA,EAAKX,KAAOA,KAAKG,KAAOV,EAAMC,OAAOC,MAGjF4B,EAASC,IA2CLT,iBAvCN,SAA0Bf,GAExB,IAAMwB,EAAiCP,EAAMU,QAAO,SAAChB,GAAD,OAAyBA,EAAKX,KAAOA,KAGzFuB,EAASC,IAmCLd,mBA/BN,SAA4BV,GAE1B,IAAMwB,EAA8B,YAAOP,GAG3CO,EAAcE,MAAK,SAACf,GAAD,OAAyBA,EAAKX,KAAOA,KAAKI,aAAeoB,EAAcE,MAAK,SAACf,GAAD,OAAyBA,EAAKX,KAAOA,KAAKI,YAGzImB,EAASC,IAwBLX,eApBN,SAAwBpB,GACY,IAA9BA,EAAMC,OAAOC,MAAMiC,OACrBnC,EAAMC,OAAOmC,UAAUC,IAAI,oBAE3BrC,EAAMC,OAAOmC,UAAUE,OAAO,0BAuB7B,MAAiBZ,I","file":"static/js/main.21a56081.chunk.js","sourcesContent":["// Import dependencies\nimport * as React from 'react'\nimport shortid from 'shortid'\n\n// Import interfaces\nimport {TodoInterface, TodoFormInterface} from './../interfaces'\n\n// Todo form component\nconst TodoForm = (props: TodoFormInterface) => {\n  // Create ref for form input\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  // Create new form state\n  const [formState, setFormState] = React.useState('')\n\n  // Handle todo input change\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // Update form state with the text from input\n    setFormState(event.target.value)\n  }\n\n  // Handle 'Enter' in todo input\n  function handleInputEnter(event: React.KeyboardEvent) {\n    // Check for 'Enter' key\n    if (event.key === 'Enter') {\n      // Prepare new todo object\n      const newTodo: TodoInterface = {\n        id: shortid.generate(),\n        text: formState,\n        isCompleted: false\n      }\n\n      // Create new todo item\n      props.handleTodoCreate(newTodo)\n\n      // Reset the input field\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = ''\n      }\n    }\n  }\n\n  return (\n    <div className=\"todo-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder='Enter new todo'\n        onChange={event => handleInputChange(event)}\n        onKeyPress={event => handleInputEnter(event)}\n      />\n    </div>\n  )\n}\n\nexport default TodoForm","// Import dependencies\nimport * as React from 'react'\n\n// Import interfaces\nimport { TodoItemInterface } from './../interfaces'\n\n// TodoItem component\nconst TodoItem = (props: TodoItemInterface) => {\n  return (\n    <div className='todo-item'>\n      <div onClick={() => props.handleTodoComplete(props.todo.id)}>\n        {props.todo.isCompleted ? (\n          <span className=\"todo-item-checked\">&#x2714;</span>\n        ) : (\n          <span className=\"todo-item-unchecked\" />\n        )}\n      </div>\n\n      <div className=\"todo-item-input-wrapper\">\n        <input\n          value={props.todo.text}\n          onBlur={props.handleTodoBlur}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}\n        />\n      </div>\n\n      <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>\n        &#x02A2F;\n      </div>\n    </div>\n  )\n}\n\nexport default TodoItem","// Import dependencies\nimport * as React from 'react'\n\n// Import TodoItem\nimport TodoItem from './todo-item'\n\n// Import interfaces\nimport { TodoListInterface } from './../interfaces'\n\n// TodoList component\nconst TodoList = (props: TodoListInterface) => {\n  return (\n    <div className=\"todo-list\">\n      <ul>\n        {props.todos.map((todo) => (\n          <li key={todo.id}>\n            <TodoItem\n              todo={todo}\n              handleTodoUpdate={props.handleTodoUpdate}\n              handleTodoRemove={props.handleTodoRemove}\n              handleTodoComplete={props.handleTodoComplete}\n              handleTodoBlur={props.handleTodoBlur}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList","// Import dependencies\nimport * as React from 'react'\nimport { render } from 'react-dom'\n\n// Import components\nimport TodoForm from './components/todo-form'\nimport TodoList from './components/todo-list'\n\n// Import interfaces\nimport { TodoInterface } from './interfaces'\n\n// Import styles\nimport './css/styles.css'\n\n// TodoListApp component\nconst TodoListApp = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([])\n\n  // Creating new todo item\n  function handleTodoCreate(todo: TodoInterface) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Update new todos state\n    newTodosState.push(todo)\n\n    // Update todos state\n    setTodos(newTodosState)\n  }\n\n  // Update existing todo item\n  function handleTodoUpdate(event: React.ChangeEvent<HTMLInputElement>, id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Find correct todo item to update\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text = event.target.value\n\n    // Update todos state\n    setTodos(newTodosState)\n  }\n\n  // Remove existing todo item\n  function handleTodoRemove(id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = todos.filter((todo: TodoInterface) => todo.id !== id)\n\n    // Update todos state\n    setTodos(newTodosState)\n  }\n\n  // Check existing todo item as completed\n  function handleTodoComplete(id: string) {\n    // Copy current todos state\n    const newTodosState: TodoInterface[] = [...todos]\n\n    // Find the correct todo item and update its 'isCompleted' key\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted = !newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\n\n    // Update todos state\n    setTodos(newTodosState)\n  }\n\n  // Check if todo item has title\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add('todo-input-error')\n    } else {\n      event.target.classList.remove('todo-input-error')\n    }\n  }\n\n  return (\n    <div className=\"todo-list-app\">\n      <TodoForm\n        todos={todos}\n        handleTodoCreate={handleTodoCreate}\n      />\n\n      <TodoList\n        todos={todos}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<TodoListApp />, rootElement)"],"sourceRoot":""}